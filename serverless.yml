service: print-stocks-serverless

frameworkVersion: "2"

useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: "20201221"
  environment:
    STOCKS: ${env:STOCKS}
    BUCKET_NAME: ${self:custom.StockChartsBucket.name}
    SENDER_EMAIL: ${env:SENDER_EMAIL}
    RECEIVER_EMAIL: ${env:RECEIVER_EMAIL}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource: arn:aws:s3:::${self:custom.StockChartsBucket.name}/*
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: arn:aws:ses:*

functions:
  printStocks:
    handler: dist/handlers/printStocks.handler
    memorySize: 2048
    timeout: 15
    layers:
      - arn:aws:lambda:${aws:region}:764866452798:layer:chrome-aws-lambda:31
    events:
      - schedule: cron(30 21 ? * MON-FRI *)
      # UTF 0 time

resources:
  Resources:
    StockChartsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.StockChartsBucket.name}
        LifecycleConfiguration:
          Rules:
            - Id: ExpireCharts
              Status: Enabled
              ExpirationInDays: 7
    StockChartsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref StockChartsBucket
        PolicyDocument:
          Statement:
            - Sid: PublicRead
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.StockChartsBucket.name}/*

custom:
  StockChartsBucket:
    name: stock-charts-bucket-veiga-${self:provider.stage}
